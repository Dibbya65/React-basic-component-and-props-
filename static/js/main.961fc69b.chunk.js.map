{"version":3,"sources":["components/Monsters/Monster/Monster.js","components/Monsters/Monsters.js","components/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Monster","props","className","src","monster","id","alt","width","name","email","Monsters","monsters","map","SearchBox","type","placeholder","handleChange","onChange","App","state","searchField","e","setState","target","value","fetch","then","response","json","users","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAiBeA,EAdC,SAACC,GACf,OACE,sBAAKC,UAAU,UAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,IAC3CC,IAAI,UACJC,MAAM,SAER,6BAAKN,EAAMG,QAAQI,OACnB,4BAAIP,EAAMG,QAAQK,YCETC,G,MAVE,SAACT,GAChB,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMU,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAA0BA,QAASA,GAArBA,EAAQC,WCQfQ,G,YAbG,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,aAAcR,EAAe,EAAfA,KAAMH,EAAS,EAATA,GAC1D,OACE,uBACEH,UAAU,SACVY,KAAMA,EACNN,KAAMA,EACNH,GAAIA,EACJU,YAAaA,EACbE,SAAUD,MCNKE,E,4MACnBC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,EASfJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,uDARxC,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKP,SAAS,CAAEX,SAAUkB,S,oBAMhC,WACE,OACE,sBAAK3B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEY,KAAK,SACLN,KAAK,cACLO,YAAY,iBACZV,GAAG,cACHW,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUL,SAAUmB,KAAKX,MAAMR,kB,GA1BNoB,aCOlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.961fc69b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Monster.css';\r\n\r\nconst Monster = (props) => {\r\n  return (\r\n    <div className='Monster'>\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}`}\r\n        alt='monster'\r\n        width='100%'\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monster;\r\n","import React from 'react';\r\nimport Monster from './Monster/Monster';\r\nimport './Monsters.css';\r\n\r\nconst Monsters = (props) => {\r\n  return (\r\n    <div className='Monsters'>\r\n      {props.monsters.map((monster) => (\r\n        <Monster key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monsters;\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ type, placeholder, handleChange, name, id }) => {\r\n  return (\r\n    <input\r\n      className='Search'\r\n      type={type}\r\n      name={name}\r\n      id={id}\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\nimport Monsters from './components/Monsters/Monsters';\nimport './App.css';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nexport default class App extends Component {\n  state = {\n    monsters: [],\n    searchField: '',\n  };\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ monsters: users });\n      });\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          type='search'\n          name='searchField'\n          placeholder='search monster'\n          id='searchField'\n          handleChange={this.handleChange}\n        />\n        <Monsters monsters={this.state.monsters}></Monsters>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}